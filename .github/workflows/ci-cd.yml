name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  # Check what files changed to determine if we need Docker tests
  changes:
    runs-on: ubuntu-latest
    outputs:
      docker: ${{ steps.changes.outputs.docker }}
      code: ${{ steps.changes.outputs.code }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          docker:
            - 'Dockerfile*'
            - 'docker-compose*.yml'
            - '.github/workflows/**'
            - '**/requirements.txt'
            - 'api/**'
            - 'dashboard/**'
            - 'mlflow/**'
          code:
            - '**/*.py'
            - '**/*.yml'
            - '**/*.yaml'            - '**/*.json'

  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.code == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort bandit safety pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi
        if [ -f dashboard/requirements.txt ]; then pip install -r dashboard/requirements.txt; fi
        if [ -f mlflow/requirements.txt ]; then pip install -r mlflow/requirements.txt; fi
        
    - name: Code formatting check (Black)
      run: |
        black --check --diff .
      continue-on-error: true
      
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff .
      continue-on-error: true
      
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Security scan with Bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
      continue-on-error: true
      
    - name: Check for known security vulnerabilities
      run: |
        safety check || true
      continue-on-error: true
      
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json
  docker-build:
    name: Docker Build & Test (Local Only)
    runs-on: ubuntu-latest
    needs: [changes, code-quality]
    if: needs.changes.outputs.docker == 'true'
    
    strategy:
      matrix:
        service: [api, dashboard, mlflow]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
          
    - name: Build Docker image locally
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: ${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          SERVICE=${{ matrix.service }}
          
    - name: Test Docker image
      run: |
        echo "Testing Docker image for ${{ matrix.service }}"
        docker images | grep ${{ matrix.service }}
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, docker-build]
    if: needs.changes.outputs.docker == 'true'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio requests
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi
        
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
        sleep 30  # Wait for services to start
        
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb
        
    - name: Collect service logs
      if: always()
      run: |
        docker-compose logs > service-logs.txt
        
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          service-logs.txt
          
    - name: Stop services
      if: always()
      run: |
        docker-compose down
