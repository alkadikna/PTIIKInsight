name: Security & Dependency Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    paths:
      - '**/requirements.txt'
      - 'Dockerfile'
      - 'mlflow/Dockerfile'

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install safety
      run: pip install safety
      
    - name: Scan main requirements
      run: |
        if [ -f requirements.txt ]; then
          echo "Scanning main requirements.txt"
          safety check -r requirements.txt --json --output safety-main.json || true
          safety check -r requirements.txt
        fi
        
    - name: Scan API requirements
      run: |
        if [ -f api/requirements.txt ]; then
          echo "Scanning api/requirements.txt"
          safety check -r api/requirements.txt --json --output safety-api.json || true
          safety check -r api/requirements.txt
        fi
        
    - name: Scan Dashboard requirements
      run: |
        if [ -f dashboard/requirements.txt ]; then
          echo "Scanning dashboard/requirements.txt"
          safety check -r dashboard/requirements.txt --json --output safety-dashboard.json || true
          safety check -r dashboard/requirements.txt
        fi
        
    - name: Scan MLflow requirements
      run: |
        if [ -f mlflow/requirements.txt ]; then
          echo "Scanning mlflow/requirements.txt"
          safety check -r mlflow/requirements.txt --json --output safety-mlflow.json || true
          safety check -r mlflow/requirements.txt
        fi
        
    - name: Upload safety reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: safety-reports
        path: safety-*.json

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Build FastAPI image
      run: docker build -t ptiik-fastapi:scan .
      
    - name: Build MLflow image
      run: docker build -t ptiik-mlflow:scan ./mlflow
      
    - name: Run Trivy scan on FastAPI
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ptiik-fastapi:scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Run Trivy scan on MLflow
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ptiik-mlflow:scan'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH,MEDIUM'
        
    - name: Generate detailed FastAPI report
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ptiik-fastapi:scan'
        format: 'json'
        output: 'trivy-fastapi-report.json'
        
    - name: Generate detailed MLflow report
      uses: aquasecurity/trivy-action@master  
      with:
        image-ref: 'ptiik-mlflow:scan'
        format: 'json'
        output: 'trivy-mlflow-report.json'
        
    - name: Upload Trivy reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-reports
        path: trivy-*-report.json

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install pip-licenses
      run: pip install pip-licenses
      
    - name: Install project dependencies
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f api/requirements.txt ]; then pip install -r api/requirements.txt; fi
        if [ -f dashboard/requirements.txt ]; then pip install -r dashboard/requirements.txt; fi
        if [ -f mlflow/requirements.txt ]; then pip install -r mlflow/requirements.txt; fi
        
    - name: Generate license report
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        pip-licenses
        
    - name: Check for GPL licenses
      run: |
        echo "Checking for GPL licenses that might cause issues..."
        pip-licenses | grep -i gpl || echo "No GPL licenses found"
        
    - name: Upload license reports
      uses: actions/upload-artifact@v4
      with:
        name: license-reports
        path: |
          licenses.json
          licenses.md
